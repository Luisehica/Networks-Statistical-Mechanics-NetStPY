{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"5to objetivo específico","provenance":[],"authorship_tag":"ABX9TyNOt16GnLhoKDKUDFotVrdK"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"jcbc67TdI-ff","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626649663900,"user_tz":300,"elapsed":16966,"user":{"displayName":"Juan Higuera","photoUrl":"","userId":"08435273326297712446"}},"outputId":"f69023f1-ee31-418c-e717-ad4699f16193"},"source":["from google.colab import drive\n","drive.mount('/gdrive')\n","%cd /gdrive"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /gdrive\n","/gdrive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"IsfMCRqcJEKv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626649669940,"user_tz":300,"elapsed":180,"user":{"displayName":"Juan Higuera","photoUrl":"","userId":"08435273326297712446"}},"outputId":"c1956fb5-4a5e-4eab-daa9-72a2ec37df60"},"source":["cd \"/gdrive/MyDrive/Apuntes papers \"\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/gdrive/MyDrive/Apuntes papers \n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"urDxJEfA7k2w","executionInfo":{"status":"ok","timestamp":1626649678237,"user_tz":300,"elapsed":5863,"user":{"displayName":"Juan Higuera","photoUrl":"","userId":"08435273326297712446"}},"outputId":"766d2574-84fa-4453-c10c-724853b47512"},"source":["!pip install powerlaw"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Collecting powerlaw\n","  Downloading https://files.pythonhosted.org/packages/d5/4e/3ceab890fafff8e78a5fd7f5340c232c38b21d181fcd32d7a31079db3646/powerlaw-1.4.6.tar.gz\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from powerlaw) (1.4.1)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from powerlaw) (1.19.5)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (from powerlaw) (3.2.2)\n","Requirement already satisfied: mpmath in /usr/local/lib/python3.7/dist-packages (from powerlaw) (1.2.1)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib->powerlaw) (0.10.0)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->powerlaw) (2.4.7)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->powerlaw) (2.8.1)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->powerlaw) (1.3.1)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from cycler>=0.10->matplotlib->powerlaw) (1.15.0)\n","Building wheels for collected packages: powerlaw\n","  Building wheel for powerlaw (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for powerlaw: filename=powerlaw-1.4.6-cp37-none-any.whl size=24789 sha256=f4bd9aecd2146b2ba9790aa6e27b08dbf4987271be20128777c83c773731080f\n","  Stored in directory: /root/.cache/pip/wheels/e0/27/02/08d0e2865072bfd8d7c655e290521e3feca3fc22f1ac460601\n","Successfully built powerlaw\n","Installing collected packages: powerlaw\n","Successfully installed powerlaw-1.4.6\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"-T3aMCOiPV6w"},"source":["#networkx para teoría de grafos, matplot para gráficar, random para generar números aleatorios, stats para la entropia y solve para optimizar.\n","import networkx as nx\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import scipy as sp \n","from scipy import stats as st\n","import math \n","from scipy.optimize import fsolve\n","import powerlaw "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"89ynjVhwk9ml"},"source":["#Este algoritmo es para muestrar secuencias de enteros on una distribución dada. (Montecarlo\n","def Degree_Sec_Generator(Probabilidad_Acumulada,longitud_Secuencia,m):\n","  \"\"\"\n","  (Vector Probabilidada Acumulada, Longitud Secuencia,m) -------> (Secuencia de enteros con la distribución del vector)\n","  Este algoritmo es para muestrar secuencias de enteros on una distribución dada. (Montecarlo)\n","  recuerde que si quiere una secuencia de grado longitud_Secuencia = len(Probabilidad_Acumulada)\n","  m corresponde al valor mínimo desde el cual se muestreará la distribución, si no es necesario poner 0.\n","  \"\"\"\n","  Degree_Sequence = []\n","  sum = 0\n","  for i in range(longitud_Secuencia):\n","    k = st.uniform.rvs(scale = Probabilidad_Acumulada[len(Probabilidad_Acumulada)-1]) #Se generan números aleatoriamente entre 0 y 0.9999\n","    for j in range(len(Probabilidad_Acumulada)-m): \n","      if k <= Probabilidad_Acumulada[j+m]: # Asocia un entero positivo a cada número entre 0-0.9999\n","        Degree_Sequence.append(j+m) #construye el vector con los enteros positivos asociados a los números entre 0-1\n","        break\n","  return Degree_Sequence\n","def Degre_sec_extractor(G):\n","  degree_secuence = []\n","  deg = nx.degree(G)\n","  for i in range(len(deg)):\n","    degree_secuence.append(deg(i))\n","  return degree_secuence"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"yVyEBMTalJDr"},"source":["#esta función recibe vector de probabilidades acumulada y un entero, te entrega un grafo generado con el algoritmo expuesto\n","#en el proyecto que sustenta este respositorio\n","def maxent_generator(cum_probability,number_nodes,m):\n","  \"\"\"\n","  (cum_probability,number_nodes) -----> G\n","  esta función recibe vector de probabilidades acumulada y un entero, te entrega un grafo generado con el algoritmo expuesto\n","  en el proyecto que sustenta este respositorio\n","  \"\"\"\n","  for k in range(1000000000000):\n","          Degree_Sequence = Degree_Sec_Generator(cum_probability,number_nodes,m) #se genera secuencia\n","          if nx.is_valid_degree_sequence_havel_hakimi(Degree_Sequence) == True:\n","            if nx.is_connected(nx.havel_hakimi_graph(Degree_Sequence)) == True: #se comprueba si permite crear un grafo simple conectado\n","              Degree_Sequence.sort() #ordenamos la secuencia\n","              Grafo = nx.havel_hakimi_graph(Degree_Sequence) #creamos el grafo con el algoritmo havel hakimi\n","              break\n","  nx.double_edge_swap(Grafo,nswap=1000,max_tries=150000) #Se aleatoriza el grafo manteniendo su secuencia de grado constante\n","  return Grafo"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"9Jx9OYNiFa7P"},"source":["#Estas funciones remueven N nodos o enlaces del grafo ingresado\n","def remove_hubs_load(G,nodos_removidos): #remueve nodos con mayor load\n","  \"\"\"\n","  (G, #nodos_removidos) ---------> G\n","  \"\"\"\n","  for i in range(nodos_removidos):\n","    keys = list(nx.load_centrality(G).keys())\n","    values = list(nx.load_centrality(G).values())\n","    maxval = max(values)\n","    casilla_nodo = values.index(maxval)\n","    G.remove_node(keys[casilla_nodo])\n","  return G\n","\n","def edge_remove_hub_load(G,edges_removidos): #remueve edges con mayor load\n","  \"\"\"\n","  (G,#edges_removidos) -------> G\n","  \"\"\"\n","  for i in range(edges_removidos):\n","    keys = list(nx.edge_load_centrality(G).keys())\n","    values = list(nx.load_centrality(G).values())\n","    maxval = max(values)\n","    casilla_edge = values.index(maxval)\n","    G.remove_edge(keys[casilla_edge][0],keys[casilla_edge][1])\n","  return G\n","\n","\n","def remove_aleatory(G,nodos_removidos): #remueve nodos aleatoriamente\n","  \"\"\"\n","  (G,#nodos_removidos) -----------> G\n","  \"\"\"\n","  keys = list(G.nodes())\n","  for i in range(nodos_removidos):\n","    remove_node = np.random.randint(0,G.number_of_nodes())\n","    remnode = keys[remove_node]\n","    if (remnode in G) == True:\n","      G.remove_node(remnode)\n","  return G\n","\n","def edge_remove_aleatory(G,edges_removidos): #remueve edges aleatoriamente\n","  \"\"\"\n","  (G,#edges_removidos) ------> G\n","  \"\"\"\n","  for i in range(edges_removidos):\n","    remove_edge = np.random.randint(0,len(nx.edges(G)))\n","    if (remove_edge in G) ==True:\n","      G.remove_edge(list(nx.edges(G))[remove_edge][0],list(nx.edges(G))[remove_edge][1])\n","  return G"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"G2kkpwzYFduh"},"source":["#Estas dos funciones atacan nodos y enlaces en base al ranking en la medida fload y causan una falla en cascada\n","# la falla en cascada se realiza recalculando el load en la red y eliminando con cierta probabilidad los nodos que tengan un load mayor \n","# a su loadinicial*resiliencia, si el load supera un valor dado la probabilidad de eliminación es 100%\n","\n","def hub_cascade_failure(G,Initial_Capacity,Resiliencia,Number_Attacks):\n","  \"\"\"\n","  (Graph,float,float,int) -------> (G)\n","  Esta función ataca nodos acorde a su ranking en la medida load y luego aplica una falla en cascada\n","  acorde a que nodos soportan un mayor load que el dado por su capacidad inicial y resiliencia\n","  \"\"\"\n","  load1 = nx.load_centrality(G)\n","  keys1 = list(load1.keys())\n","  values1 = list(load1.values())\n","  nodes = len(G.nodes())\n","  Capacity = []\n","  for i in range(len(keys1)): #se definen condiciones iniciales\n","    q = (1+Initial_Capacity)*load1[keys1[i]]\n","    Capacity.append(q)\n","  DAMAGE = []\n","  ATTACK = []\n","  for i in range(Number_Attacks): #en este for se ejecutan los ataques\n","    NodosBC = len(max(nx.connected_components(G), key=len))\n","    DAMAGE.append(NodosBC/nodes) #registramos el daño con el cambio en el tamaño de la componente principal\n","    ATTACK.append(i) #registramos el número de ataque\n","    remove_hubs_load(G,1) #se remueve el nodo con mayor load\n","    DELETE_NODES = []\n","    load = nx.load_centrality(G)\n","    for j in G.nodes():\n","      val = Resiliencia*Capacity[keys1.index(j)] #calculamos el valor de load sobre el cual un nodo colapsara con 100% de seguridad\n","      if load[j] > val: \n","        DELETE_NODES.append(j) #enlistamos los nodos que colapsaran\n","      else:\n","        if load[j] > Capacity[keys1.index(j)]:#se elige si un nodo que ha superado su capacidad colapsa\n","          k = st.uniform.rvs()\n","          P = (1/(Resiliencia-1))*(load[j]/Capacity[keys1.index(j)] -1)\n","          if k <= P:\n","            DELETE_NODES.append(j) #enlistamos los nodos colapsados\n","    G.remove_nodes_from(DELETE_NODES) #se eliminan los nodos colapsados\n","\n","  return G,ATTACK,DAMAGE\n","\n","def edge_hub_cascade_failure(G,Initial_Capacity,Resiliencia,Number_Attacks):\n","  \"\"\"\n","  (Graph,float,float,int) -------> (G)\n","  Esta función ataca nodos acorde a su ranking en la medida load y luego aplica una falla en cascada\n","  acorde a que nodos soportan un mayor load que el dado por su capacidad inicial y resiliencia\n","  \"\"\"\n","  load1 = nx.edge_load_centrality(G)\n","  keys1 = list(load1.keys())\n","  values1 = list(load1.values())\n","  Capacity = []\n","  for i in range(len(keys1)): #se definen condiciones iniciales\n","    q = (1+Initial_Capacity)*load1[keys1[i]]\n","    Capacity.append(q)\n","  DAMAGEEDGE = []\n","  ATTACK = []\n","  for i in range(Number_Attacks): #en este for se ejecutan los ataques\n","    NodosBC = len(max(nx.connected_components(G), key = len))\n","    DAMAGEEDGE.append(NodosBC/len(G.nodes()))#registramos el daño con el cambio en el tamaño de la componente principal\n","    ATTACK.append(i) #registramos el número de ataque\n","    edge_remove_hub_load(G,1) #se remueve el edge con mas load \n","    DELETE_EDGES = []\n","    load = nx.edge_load_centrality(G)\n","    for j in G.edges():\n","      val = Resiliencia*Capacity[keys1.index(j)] #calculamos el valor de load sobre el cual un nodo colapsara con 100% de seguridad\n","      if load[j] > val:  #enlistamos los nodos que colapsaran\n","        DELETE_EDGES.append(j)\n","      else:\n","        if load[j] > Capacity[keys1.index(j)]: #se elige si un nodo que ha superado su capacidad colapsa\n","          k = st.uniform.rvs()\n","          P = (1/(Resiliencia -1))*(load[j]/Capacity[keys1.index(j)] - 1)\n","          if k <= P:\n","            DELETE_EDGES.append(j) #enlistamos los nodos colapsados\n","    G.remove_edges_from(DELETE_EDGES) #se eliminan los nodos colapsados\n","    \n","  return G, ATTACK, DAMAGEEDGE"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"NcHWyr8oFfPx"},"source":["def aleatory_cascade_failure(G,Initial_Capacity,Resiliencia,Number_Attacks):\n","  \"\"\"\n","  (Graph,float,float,int) -------> (G,Vector con los daños, vector con el número de ataques)\n","  Esta función luego de atacar un nodo aleatoriamente ejecuta el algoritmo de falla en cascada y te entrega como resultado\n","  el grafo atacado, un vector con los daños por ataque y un vector con el número de ataques\n","  \"\"\"\n","  load1 = nx.load_centrality(G)\n","  keys1 = list(load1.keys())\n","  values1 = list(load1.values())\n","  nodes = len(G.nodes())\n","  Capacity = []\n","  for i in range(len(keys1)): #se definen condiciones iniciales\n","    q = (1+Initial_Capacity)*load1[keys1[i]]\n","    Capacity.append(q)\n","  DAMAGE = []\n","  ATTACK = []\n","  for i in range(Number_Attacks): #en este for se ejecutan los ataques\n","    NodosBC = len(max(nx.connected_components(G), key = len))\n","    DAMAGE.append(NodosBC/len(G.nodes()))#registramos el daño con el cambio en el tamaño de la componente principal\n","    ATTACK.append(i) #registramos el número de ataque\n","    remove_aleatory(G,1) #se remueve un nodo aleatoriamente\n","    DELETE_NODES = []\n","    load = nx.load_centrality(G)\n","    for j in G.nodes():\n","      val = Resiliencia*Capacity[keys1.index(j)] #calculamos el valor de load sobre el cual el nodo colapsara con 100% de probabilidad\n","      if load[j] > val: \n","        DELETE_NODES.append(j) #enlistamos los nodos colapsados\n","      else:\n","        if load[j] > Capacity[keys1.index(j)]: # se decide si un nodo que ha superado su capacidad colapsa\n","          k = st.uniform.rvs()\n","          P = (1/(Resiliencia-1))*(load[j]/Capacity[keys1.index(j)] -1)\n","          if k <= P:\n","            DELETE_NODES.append(j) #enlistamos los nodos colapsados\n","    G.remove_nodes_from(DELETE_NODES) #se eliminan los nodos colapsados\n","\n","  return G,ATTACK,DAMAGE\n","\n","def edge_aleatory_cascade_failure(G,Initial_Capacity,Resiliencia,Number_attacks):\n","  \"\"\"\n","  (Graph,float,float,int) -------> (G,Vector con los daños, vector con el número de ataques)\n","  Esta función luego de atacar un enlace aleatoriamente ejecuta el algoritmo de falla en cascada y te entrega como resultado\n","  el grafo atacado, un vector con los daños por ataque y un vector con el número de ataques\n","  \"\"\"\n","  load1 = nx.edge_load_centrality(G)\n","  keys1 = list(load1.keys())\n","  values1 = list(load1.values())\n","  Capacity = []\n","  nodes = len(G.nodes())\n","  for i in range(len(keys1)): #se definen condiciones iniciales\n","    q = (1+Initial_Capacity)*load1[keys1[i]]\n","    Capacity.append(q)\n","  DAMAGEEDGE = []\n","  ATTACK = []\n","  for i in range(Number_attacks): #en este for se ejecutan los ataques\n","    NodosBC = len(max(nx.connected_components(G), key = len))\n","    DAMAGEEDGE.append(NodosBC/len(G.nodes()))#registramos el daño con el cambio en el tamaño de la componente principal\n","    ATTACK.append(i) #registramos el número de ataque\n","    edge_remove_aleatory(G,1) #se remueve un edge aleatoriamente\n","    DELETE_EDGES = []\n","    load = nx.edge_load_centrality(G)\n","    for j in G.edges():\n","      val = Resiliencia*Capacity[keys1.index(j)] #calcula el valor de load sobre el cual un nodo colapsara con 100% de probabilidad\n","      if load[j] > val: \n","        DELETE_EDGES.append(j) #enlistamos nodos colapsados\n","      else:\n","        if load[j] > Capacity[keys1.index(j)]: #se elige si un nodo que ha superado su capacidad colapsa\n","          k = st.uniform.rvs()\n","          P = (1/(Resiliencia -1))*(load[j]/Capacity[keys1.index(j)] - 1)\n","          if k <= P:\n","            DELETE_EDGES.append(j)\n","    G.remove_edges_from(DELETE_EDGES) #enlistamos nodos colapsados\n","\n","  return G, ATTACK, DAMAGEEDGE"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"rnqUk0TwMYux"},"source":["# Está función calcula la entropía de distintas distribuciones de medidas para un grafo\n","def graph_entropys(G):\n","  \"\"\"\n","  Recibe un grafo y entrega números\n","  (Graph) -----> Degree_Entropy, Eigenvector_Entropy, Betweenness_Entropy, Closeness_Entropy\n","  \"\"\"\n","  EIGENVECTOR = []\n","  DEGREE = []\n","  BETWEENNESS = []\n","  CLOSENESS = []\n","  LOAD = []\n","  #las siguientes 4 lineas producen 4 diccionarios con los nodos y sus centralidades correspondientes\n","  eigenvector = nx.eigenvector_centrality(G,max_iter = 10000)\n","  degree = nx.degree(G) \n","  betweenness = nx.betweenness_centrality(G) \n","  closeness = nx.closeness_centrality(G) \n","  load = nx.load_centrality(G)\n","  for i in range(len(eigenvector)): #este for desempaqueta los diccionarios, para coger solo las centralidades en listas\n","    EIGENVECTOR.append(eigenvector[i])\n","    DEGREE.append(degree[i])\n","    BETWEENNESS.append(betweenness[i])\n","    CLOSENESS.append(closeness[i])\n","    LOAD.append(load[i])\n","  # aca se usa el modulo stats de scipy para calcular las entropias\n","  Closeness_Entropy = st.entropy(CLOSENESS)\n","  Degree_Entropy = st.entropy(DEGREE)\n","  Eigenvector_Entropy = st.entropy(EIGENVECTOR)\n","  Betweenness_Entropy = st.entropy(BETWEENNESS)\n","  Load_Entropy = st.entropy(LOAD)\n","  return Degree_Entropy, Eigenvector_Entropy, Betweenness_Entropy, Closeness_Entropy, Load_Entropy"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e0AbOzmmFguY","executionInfo":{"status":"ok","timestamp":1626649687421,"user_tz":300,"elapsed":260,"user":{"displayName":"Juan Higuera","photoUrl":"","userId":"08435273326297712446"}},"outputId":"2f57c771-8ba0-41f8-af18-07c4a25f39a3"},"source":["#Esta función recibe un xfinal hasta donde sumar y un número de particiones.\n","#Juntos definen la longitud y el valor máximo del vector resultante\n","def pareto_cumm_probabilities(particiones,xfin, distribution = st.pareto.cdf):\n","  \"\"\"\n","  (particiones,xfin) -----> (probability_cum_vector)\n","  Esta función recibe un xfinal hasta donde sumar y un número de particiones.\n","  Juntos definen la longitud y el valor máximo del vector resultante\n","  \"\"\"\n","  dx = xfin/particiones\n","  x = []\n","  probability_cum_vector = []\n","  for i in range(particiones):\n","    equis = 1 + dx*i\n","    x.append(equis)\n","    pes = st.pareto.cdf(x[i],2.4) #se eligió un coeficiente de 2.4 para la distribución de pareto\n","    probability_cum_vector.append(pes)\n","  return probability_cum_vector, x # entrega como resultado el vector y los valores de x asociados\n","\n","#Nnodes es el número de nodos\n","xfin = 5.9\n","Nnodes = 100\n","max_degree = Nnodes-1\n","P, x = pareto_cumm_probabilities(max_degree,xfin) #creamos el vector de probabilidades acumuladas\n","print(P)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[0.0, 0.1297113986410653, 0.23681637747088258, 0.32616368522356454, 0.4013853535864016, 0.46524240599449485, 0.5198618418858715, 0.5669021213080481, 0.6076706734855872, 0.6432086200544576, 0.6743527175222728, 0.7017812273687316, 0.7260482867071414, 0.7476099443199842, 0.7668440832191896, 0.7840658089235819, 0.7995394398212912, 0.8134879265510604, 0.8261003084925805, 0.83753765892932, 0.8479378573062638, 0.857419444410954, 0.8660847554481863, 0.8740224807416574, 0.8813097698908035, 0.8880139695997588, 0.8941940659051654, 0.8999018865929804, 0.9051831080709604, 0.9100781020166605, 0.9146226501323684, 0.9188485498481969, 0.9227841294776346, 0.926454687885914, 0.9298828709829733, 0.9330889951486152, 0.9360913259216977, 0.938906318848252, 0.9415488282157126, 0.9440322884476581, 0.9463688721529863, 0.948569628181713, 0.9506446025100114, 0.952602944338565, 0.9544529994239155, 0.9562023923587344, 0.9578580992629334, 0.9594265121344762, 0.9609134959295268, 0.9623244392903715, 0.9636642997116486, 0.9649376438269361, 0.9661486834054975, 0.9673013075703423, 0.9683991116815557, 0.9694454232712907, 0.9704433253673934, 0.9713956775001186, 0.9723051346497259, 0.973174164361073, 0.974005062223892, 0.9747999658936446, 0.9755608678071692, 0.9762896267293272, 0.9769879782511421, 0.977657544346198, 0.9782998420800403, 0.9789162915567877, 0.9795082231778994, 0.9800768842798991, 0.980623445210683, 0.9811490048977013, 0.9816545959557085, 0.9821411893768207, 0.9826096988412308, 0.983060984683031, 0.9834958575421316, 0.98391508173018, 0.9843193783356394, 0.9847094280907333, 0.9850858740207739, 0.9854493238944351, 0.9858003524917756, 0.9861395037052453, 0.9864672924875009, 0.9867842066585828, 0.9870907085838716, 0.9873872367332096, 0.9876742071306516, 0.9879520147034712, 0.9882210345382965, 0.9884816230515645, 0.9887341190808688, 0.9889788449032141, 0.9892161071856841, 0.9894461978735714, 0.9896693950205958, 0.9898859635654623, 0.9900961560586601]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"mGG8C7eUIaQG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626649920152,"user_tz":300,"elapsed":986,"user":{"displayName":"Juan Higuera","photoUrl":"","userId":"08435273326297712446"}},"outputId":"57cd8ca7-8a02-48c6-fb22-f53f0080ccc5"},"source":["Nnodes = 150\n","m = 3 #grado mínimo para las redes libres de escala\n","GW = nx.watts_strogatz_graph(Nnodes,6,0.1)\n","GB = nx.barabasi_albert_graph(Nnodes,m)\n","secuence = Degre_sec_extractor(GB)\n","results = powerlaw.Fit(secuence,discrete = True)\n","alpha = results.power_law.alpha\n","xmin = results.power_law.xmin\n","print(alpha,\"alpha barabasi\")\n","xfin = 22\n","max_degree = Nnodes -1\n","P, x = pareto_cumm_probabilities(max_degree,xfin,alpha) #creamos el vector de probabilidades acumuladas\n","GA = maxent_generator(P,Nnodes,m)\n","secuence2 = Degre_sec_extractor(GB)\n","results2 = powerlaw.Fit(secuence2, discrete = True)\n","alpha2 = results2.power_law.alpha\n","xmin2 = results2.power_law.xmin\n","print(alpha,alpha2,\"exponentes\")\n","print(xmin,xmin2,\"xmin\")\n","print(GW.number_of_edges(),GB.number_of_edges(),GA.number_of_edges(),\"Número de enlaces\")\n","\n","wDegree_Entropy, wEigenvector_Entropy, wBetweenness_Entropy, wCloseness_Entropy, wLoad_entropy = graph_entropys(GW)\n","BDegree_Entropy, BEigenvector_Entropy, BBetweenness_Entropy, BCloseness_Entropy, BLoad_entropy = graph_entropys(GB)\n","ADegree_Entropy, AEigenvector_Entropy, ABetweenness_Entropy, ACloseness_Entropy, ALoad_entropy = graph_entropys(GA)\n","print(P[len(P)-1])\n","print(wDegree_Entropy,BDegree_Entropy,ADegree_Entropy,\"degree\")\n","print(wEigenvector_Entropy,BEigenvector_Entropy, AEigenvector_Entropy,\"eigen\")\n","print(wBetweenness_Entropy,BBetweenness_Entropy, ABetweenness_Entropy,\"betweenness\")\n","print(wCloseness_Entropy,BCloseness_Entropy, ACloseness_Entropy,\"closeness\")\n","print(wLoad_entropy,BLoad_entropy, ALoad_entropy,\"load\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Calculating best minimal value for power law fit\n","/usr/local/lib/python3.7/dist-packages/powerlaw.py:700: RuntimeWarning: invalid value encountered in true_divide\n","  (Theoretical_CDF * (1 - Theoretical_CDF))\n","Calculating best minimal value for power law fit\n"],"name":"stderr"},{"output_type":"stream","text":["2.527547111818442 alpha barabasi\n","2.527547111818442 2.527547111818442 exponentes\n","3.0 3.0 xmin\n","450 441 398 Número de enlaces\n","0.9994522707104977\n","5.001443129368434 4.766984150331458 4.798031320909992 degree\n","4.95350653765531 4.7571313649743905 4.6875500444148654 eigen\n","4.653641590806981 3.9418170244367876 4.174384219982235 betweenness\n","5.006876591315875 5.005011224069008 5.003195945543534 closeness\n","4.644997932359775 3.983741556724636 4.2080512175540115 load\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":367},"id":"y-Rq3vajO1RJ","executionInfo":{"status":"ok","timestamp":1626649947852,"user_tz":300,"elapsed":3808,"user":{"displayName":"Juan Higuera","photoUrl":"","userId":"08435273326297712446"}},"outputId":"c14493c2-31a1-4ad7-ca2b-b40826406c93"},"source":["GA2 = GA.copy()\n","GB2 = GB.copy()\n","GW2 = GW.copy()\n","num_attacks = 20\n","GW2, ATTACKW,DAMAGEW = hub_cascade_failure(GW2,1,1.1,num_attacks)\n","GB2, ATTACKB,DAMAGEB = hub_cascade_failure(GB2,1,1.1,num_attacks)\n","GA2, ATTACK,DAMAGE = hub_cascade_failure(GA2,1,1.1,num_attacks)\n","\n","print(wDegree_Entropy,BDegree_Entropy,ADegree_Entropy,\"degree\")\n","print(wEigenvector_Entropy,BEigenvector_Entropy, AEigenvector_Entropy,\"eigen\")\n","print(wBetweenness_Entropy,BBetweenness_Entropy, ABetweenness_Entropy,\"betweenness\")\n","print(wCloseness_Entropy,BCloseness_Entropy, ACloseness_Entropy,\"closeness\")\n","print(wLoad_entropy,BLoad_entropy, ALoad_entropy,\"load\")\n","\n","plt.plot(ATTACKW,DAMAGEW,\"green\", label =\"Watts_Strogatz\")\n","plt.plot(ATTACKB,DAMAGEB,\"blue\", label = \"Barabasi_Albert\")\n","plt.plot(ATTACK,DAMAGE,color =\"red\", label = \"SF_maxent\")\n","plt.xlabel(\"Número de ataques\")\n","plt.ylabel(\"Población restante de nodos\")\n","plt.legend(loc = 1)\n","plt.savefig(\"hub_cascade_failure.jpg\", bbox_inches = \"tight\", dpi= 300)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["5.001443129368434 4.766984150331458 4.798031320909992 degree\n","4.95350653765531 4.7571313649743905 4.6875500444148654 eigen\n","4.653641590806981 3.9418170244367876 4.174384219982235 betweenness\n","5.006876591315875 5.005011224069008 5.003195945543534 closeness\n","4.644997932359775 3.983741556724636 4.2080512175540115 load\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":280},"id":"JW69g4z6ufL7","executionInfo":{"status":"ok","timestamp":1626650221062,"user_tz":300,"elapsed":265774,"user":{"displayName":"Juan Higuera","photoUrl":"","userId":"08435273326297712446"}},"outputId":"3b28c4c8-3a99-4a4a-d27b-01165b1fbadb"},"source":["#ataque aleatorio promedio sobre 60 ataques\n","muestra = 60\n","DW = []\n","DB = []\n","DA = []\n","for i in range(muestra):\n","  GA2 = GA.copy()\n","  GB2 = GB.copy()\n","  GW2 = GW.copy()\n","  num_attacks = 25\n","  GW2, ATTACKW,DAMAGEW = aleatory_cascade_failure(GW2,1,1.1,num_attacks)\n","  GB2, ATTACKB,DAMAGEB = aleatory_cascade_failure(GB2,1,1.1,num_attacks)\n","  GA2, ATTACK,DAMAGE = aleatory_cascade_failure(GA2,1,1.1,num_attacks)\n","  DW.append(DAMAGEW)\n","  DB.append(DAMAGEB)\n","  DA.append(DAMAGE)\n","DWP = []\n","DBP = []\n","DAP = []\n","for j in range(len(DW[i])):\n","  sumw = 0\n","  sumb = 0\n","  suma = 0\n","  for i in range(muestra):\n","    sumw = sumw + DW[i][j]\n","    sumb = sumb + DB[i][j]\n","    suma = suma + DA[i][j]\n","  DWP.append(sumw)\n","  DBP.append(sumb)\n","  DAP.append(suma)\n","plt.plot(ATTACKW,DWP,\"green\", label =\"Watts_Strogatz\")\n","plt.plot(ATTACKB,DBP,\"blue\", label = \"Barabasi_Albert\")\n","plt.plot(ATTACK,DAP,color =\"red\", label = \"SF_maxent\")\n","plt.xlabel(\"Número de ataques\")\n","plt.ylabel(\"Población restante de nodos\")\n","plt.legend(loc = 3)\n","plt.savefig(\"aleatory_cascade_failureprom.jpg\", bbox_inches = \"tight\", dpi= 300)\n","\n","  \n","\n","\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":367},"id":"pg1zgCTEncbX","executionInfo":{"status":"ok","timestamp":1626650227040,"user_tz":300,"elapsed":5108,"user":{"displayName":"Juan Higuera","photoUrl":"","userId":"08435273326297712446"}},"outputId":"65fa2d23-8040-42ff-daad-69322fa8d86e"},"source":["GA2 = GA.copy()\n","GB2 = GB.copy()\n","GW2 = GW.copy()\n","\n","num_attacks = 25\n","GW2, ATTACKW,DAMAGEW = aleatory_cascade_failure(GW2,1,1.1,num_attacks)\n","GB2, ATTACKB,DAMAGEB = aleatory_cascade_failure(GB2,1,1.1,num_attacks)\n","GA2, ATTACK,DAMAGE = aleatory_cascade_failure(GA2,1,1.1,num_attacks)\n","\n","print(wDegree_Entropy,BDegree_Entropy,ADegree_Entropy,\"degree\")\n","print(wEigenvector_Entropy,BEigenvector_Entropy, AEigenvector_Entropy,\"eigen\")\n","print(wBetweenness_Entropy,BBetweenness_Entropy, ABetweenness_Entropy,\"betweenness\")\n","print(wCloseness_Entropy,BCloseness_Entropy, ACloseness_Entropy,\"closeness\")\n","print(wLoad_entropy,BLoad_entropy, ALoad_entropy,\"load\")\n","\n","plt.plot(ATTACKW,DAMAGEW,\"green\", label =\"Watts_Strogatz\")\n","plt.plot(ATTACKB,DAMAGEB,\"blue\", label = \"Barabasi_Albert\")\n","plt.plot(ATTACK,DAMAGE,color =\"red\", label = \"SF_maxent\")\n","plt.xlabel(\"Número de ataques\")\n","plt.ylabel(\"Población restante de nodos\")\n","plt.legend(loc = 3)\n","plt.savefig(\"aleatory_cascade_failure.jpg\", bbox_inches = \"tight\", dpi= 300)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["5.001443129368434 4.766984150331458 4.798031320909992 degree\n","4.95350653765531 4.7571313649743905 4.6875500444148654 eigen\n","4.653641590806981 3.9418170244367876 4.174384219982235 betweenness\n","5.006876591315875 5.005011224069008 5.003195945543534 closeness\n","4.644997932359775 3.983741556724636 4.2080512175540115 load\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":367},"id":"izBvRwW6QV-9","executionInfo":{"status":"ok","timestamp":1626650333607,"user_tz":300,"elapsed":106579,"user":{"displayName":"Juan Higuera","photoUrl":"","userId":"08435273326297712446"}},"outputId":"b416b778-d109-47d7-8be4-075bf48c6293"},"source":["GA2 = GA.copy()\n","GB2 = GB.copy()\n","GW2 = GW.copy()\n","\n","num_attacks = 200\n","\n","GW2, ATTACKW,DAMAGEW = edge_aleatory_cascade_failure(GW2,1,1.1,num_attacks)\n","GB2, ATTACKB,DAMAGEB = edge_aleatory_cascade_failure(GB2,1,1.1,num_attacks)\n","GA2, ATTACK,DAMAGE = edge_aleatory_cascade_failure(GA2,1,1.1,num_attacks)\n","\n","print(wDegree_Entropy,BDegree_Entropy,ADegree_Entropy,\"degree\")\n","print(wEigenvector_Entropy,BEigenvector_Entropy, AEigenvector_Entropy,\"eigen\")\n","print(wBetweenness_Entropy,BBetweenness_Entropy, ABetweenness_Entropy,\"betweenness\")\n","print(wCloseness_Entropy,BCloseness_Entropy, ACloseness_Entropy,\"closeness\")\n","print(wLoad_entropy,BLoad_entropy, ALoad_entropy,\"load\")\n","\n","plt.plot(ATTACKB,DAMAGEB,color =\"blue\", label = \"Barabasi_Albert\")\n","plt.plot(ATTACK,DAMAGE,color =\"red\", label = \"SF_maxent\")\n","plt.plot(ATTACKW,DAMAGEW, color = \"green\", label = \"Watts_Strogatz\")\n","plt.xlabel(\"Número de ataques\")\n","plt.ylabel(\"Población restante de nodos\")\n","plt.legend(loc = 3)\n","\n","plt.savefig(\"edge_aleatory_cascade_failure.jpg\", bbox_inches = \"tight\", dpi= 300)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["5.001443129368434 4.766984150331458 4.798031320909992 degree\n","4.95350653765531 4.7571313649743905 4.6875500444148654 eigen\n","4.653641590806981 3.9418170244367876 4.174384219982235 betweenness\n","5.006876591315875 5.005011224069008 5.003195945543534 closeness\n","4.644997932359775 3.983741556724636 4.2080512175540115 load\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":367},"id":"SuMMVb3FS2cE","executionInfo":{"status":"ok","timestamp":1626651293100,"user_tz":300,"elapsed":161093,"user":{"displayName":"Juan Higuera","photoUrl":"","userId":"08435273326297712446"}},"outputId":"33f0add8-b7a0-47b5-aa47-099a9fa8e419"},"source":["GA2 = GA.copy()\n","GB2 = GB.copy()\n","GW2 = GW.copy()\n","\n","num_attacks = 140\n","GW2, ATTACKW,DAMAGEW = edge_hub_cascade_failure(GW2,1,1.1,num_attacks)\n","GB2, ATTACKB,DAMAGEB = edge_hub_cascade_failure(GB2,1,1.1,num_attacks)\n","GA2, ATTACK,DAMAGE = edge_hub_cascade_failure(GA2,1,1.1,num_attacks)\n","\n","print(wDegree_Entropy,BDegree_Entropy,ADegree_Entropy,\"degree\")\n","print(wEigenvector_Entropy,BEigenvector_Entropy, AEigenvector_Entropy,\"eigen\")\n","print(wBetweenness_Entropy,BBetweenness_Entropy, ABetweenness_Entropy,\"betweenness\")\n","print(wCloseness_Entropy,BCloseness_Entropy, ACloseness_Entropy,\"closeness\")\n","print(wLoad_entropy,BLoad_entropy, ALoad_entropy,\"load\")\n","\n","plt.plot(ATTACKW,DAMAGEW,\"green\", label =\"Watts_Strogatz\")\n","plt.plot(ATTACKB,DAMAGEB,\"blue\", label = \"Barabasi_Albert\")\n","plt.plot(ATTACK,DAMAGE,color =\"red\", label = \"SF_maxent\")\n","plt.xlabel(\"Número de ataques\")\n","plt.ylabel(\"Población restante de nodos\")\n","plt.legend(loc = 3)\n","plt.savefig(\"edge_hub_cascade_failure.jpg\", bbox_inches = \"tight\", dpi= 300)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["5.001443129368434 4.766984150331458 4.798031320909992 degree\n","4.95350653765531 4.7571313649743905 4.6875500444148654 eigen\n","4.653641590806981 3.9418170244367876 4.174384219982235 betweenness\n","5.006876591315875 5.005011224069008 5.003195945543534 closeness\n","4.644997932359775 3.983741556724636 4.2080512175540115 load\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]}]}